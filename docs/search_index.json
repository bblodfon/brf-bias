[
["index.html", "Standaridized Boolean Regulatory Function Bias Input Libraries Link-operator Boolean Regulatory Functions Threshold functions", " Standaridized Boolean Regulatory Function Bias John Zobolas Last updated: 12 October, 2020 Input Libraries Libraries used: library(gtools) library(dplyr) library(tibble) library(tidyr) library(usefun) library(foreach) library(doParallel) library(DT) library(ggplot2) library(ggpubr) library(corrplot) library(latex2exp) Link-operator Boolean Regulatory Functions Let \\(f\\) be a boolean function \\(f(x,y):\\{0,1\\}^n \\rightarrow \\{0,1\\}\\), with \\(m \\ge 1\\) activators \\(x=\\{x_i\\}_{i=1}^{m}\\) and \\(k \\ge 1\\) inhibitors \\(y=\\{y_i\\}_{i=1}^{k}\\), that is a total of \\(n = m + k\\) regulators. The link-operator boolean functions have a (non-DNF) formula representation that partitions the two distinct type of regulators (positive regulators are called activators, negative regulators are called inhibitors) into two separate groups and connect them with a specific logical operator (which we call the link operator). The presence of the link operator is what forces the condition \\(m,k \\ge 1\\) (at least one regulator in each category). An example of such a function that has been used in the literature is the formula with the AND-NOT link operator (Mendoza and Xenarios 2006): AND-NOT: \\[f_{AND-NOT}(x,y) = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\land \\lnot \\left(\\bigvee_{i=1}^{k} y_i\\right)\\] A variation of this one is the OR-NOT link operator function: OR-NOT: \\[f_{OR-NOT}(x,y) = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\lor \\lnot \\left(\\bigvee_{i=1}^{k} y_i\\right)\\] In theory, we could use any of the known logical operators as a link-operator, e.g. XOR, NAND, simple AND etc. For example, another link-operator function is the next one: BalanceOp1: \\[f(x,y) = \\bigvee_{\\forall (i,j)}^{m,k}(x_i\\land \\lnot y_j) = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\land \\left(\\bigvee_{i=1}^{k} \\lnot y_i\\right)\\] Cury, Monteiro, and Chaouiya (2019) defined the consistent boolean regulatory functions and their respective complete DNF forms (CDNF). The link-operator functions listed above are a subset of these functions, since they respect the regulatory structure in their respective DNF forms (for the BalanceOp1 it’s evident since it’s written first in the DNF - for the AND-NOT and OR-NOT functions, see their respective DNF forms in the truth density proofs 1 and 2. Threshold functions The boolean threshold functions are formulated based on given pseudo-Boolean constrains for the regulators. Thus, the activators and inhibitors are combined in an additive manner and not a combinatorial one and the majority rule defines the value of the function (Chaouiya, Ourrad, and Lima 2013). Two simple cases of threshold functions are given below: exp_act_win: \\[f_{act-win}(x,y)=\\begin{cases} 1, &amp; \\text{for } \\sum_{i=1}^{m} x_i \\ge \\sum_{i=1}^{k} y_i\\\\ 0, &amp; \\text{otherwise} \\end{cases}\\] exp_inh_win: \\[f_{inh-win}(x,y)=\\begin{cases} 1, &amp; \\text{for } \\sum_{i=1}^{m} x_i \\gt \\sum_{i=1}^{k} y_i\\\\ 0, &amp; \\text{otherwise} \\end{cases}\\] Note that: \\(f_{inh-win}(x,y) = \\lnot f_{act-win}(y,x)\\). Note that every boolean function has an equivalent combinatorial expression (i.e. the variables are connected with logical operators) and I searched for an analytic formula for the two last threshold functions. More more info, see this math.stackexchange question. "],
["truth-density-data-analysis.html", "Truth Density Data Analysis Data Truth Density formulas AND-NOT vs OR-NOT TD BalanceOp1 TD Threshold Functions TD TD Data Distance Correlation", " Truth Density Data Analysis Data Truth Density (TD) of a boolean equation/expression/function, given it’s equivalent truth table, is the number of rows that the function is active divided by the total number of rows \\((2^n)\\). I created every possible truth table for up to \\(20\\) variables (variables here means regulators for us) and calculated the AND-NOT, OR-NOT, BalanceOp1, exp_act_win, exp_inh_win boolean function results for every possible configuration of the number of activators and inhibitors that added up to the number of regulators. Then, from the truth tables I calculated the truth density of each operator for each particular configuration. For more details see the script get_stats.R See part of the data below: stats = readRDS(file = &quot;data/td_stats.rds&quot;) DT::datatable(data = stats, caption = htmltools::tags$caption(&quot;Truth Density Data&quot;, style=&quot;color:#dd4814; font-size: 18px&quot;), options = list(pageLength = 6, scrollX = TRUE, order = list(list(1, &quot;asc&quot;)))) %&gt;% formatRound(4:8, digits = 2) Truth Density formulas Here we prove the exact formulas for the truth densities in the case of the AND-NOT and OR-NOT link operator boolean functions. For both propositions presented, we assume that \\(f\\) is a boolean function \\(f(x,y):\\{0,1\\}^n \\rightarrow \\{0,1\\}\\), with a total of \\(n\\) regulators/input variables. We also assume that these regulators are uniquely separated to two distinct groups: \\(m\\) activators (positive regulators) \\(x=\\{x_i\\}_{i=1}^{m}\\) and \\(k\\) inhibitors (negative regulators) \\(y=\\{y_i\\}_{i=1}^{k}\\), with \\(n = m + k\\). Proposition 1 (AND-NOT Truth Density Formula) When a boolean regulatory function \\(f\\) has the form of an AND-NOT link-operator boolean function: \\(f_{AND-NOT}(x,y) = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\land \\lnot \\left(\\bigvee_{i=1}^{k} y_i\\right)\\) with \\(m \\ge 1\\) activators and \\(k \\ge 1\\) inhibitors, its truth density is \\(TD_{AND-NOT}=\\frac{2^m-1}{2^n} = \\frac{1}{2^k}-\\frac{1}{2^n}\\). Proof. Using the distributivity property and De Morgan’s law we can re-write \\(f_{AND-NOT}\\) in a DNF form as: \\[\\begin{equation} \\begin{split} f_{AND-NOT}(x,y) &amp; = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\land \\lnot \\left(\\bigvee_{i=1}^{k} y_i\\right) \\\\ &amp; = \\bigvee_{i=1}^{m} \\left( x_i \\land \\lnot \\left( \\bigvee_{i=1}^{k} y_i \\right) \\right) \\\\ &amp; = \\bigvee_{i=1}^{m} (x_i \\land \\bigwedge_{j=1}^{k} \\lnot y_j) \\\\ &amp; = \\bigvee_{i=1}^{m} (x_i \\land \\lnot y_1 \\land ... \\land \\lnot y_k) \\end{split} \\end{equation}\\] To calculate the \\(TD_{AND-NOT}\\), we need to find the number of rows of the \\(f_{AND-NOT}\\) truth table that result in a TRUE output result and divide that by the total number of rows, which is \\(2^n\\) (\\(n\\) regulators/inputs). Note that \\(f_{AND-NOT}\\), written in it’s equivalent DNF form, has exactly \\(m\\) clauses. Each clause has a unique TRUE/FALSE assignment of regulators that makes it TRUE. This happens when the activator of the clause is TRUE and all of the inhibitors FALSE. Since the condition for the inhibitors is the same regardless of the clause we are looking at and \\(f\\) is expressed in a DNF form, the TRUE outcomes of the function \\(f\\) are defined by all logical assignment combinations of the \\(m\\) activators that have at least one of them being TRUE and all inhibitors assigned as FALSE. There are a total of \\(2^m\\) possible \\(TRUE/FALSE\\) logical assignments of the \\(m\\) activators (from all FALSE to all TRUE) and \\(f_{AND-NOT}\\) becomes TRUE on all except one of them (i.e. when all activators are FALSE) and the corresponding \\(2^m-1\\) truth table rows have all inhibitors assigned as FALSE. Thus \\(TD_{AND-NOT}=\\frac{2^m-1}{2^n}\\). Proposition 2 (OR-NOT Truth Density Formula) When a boolean regulatory function \\(f\\) has the form of an OR-NOT link-operator boolean function: \\(f_{OR-NOT}(x,y) = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\lor \\lnot \\left(\\bigvee_{i=1}^{k} y_i\\right)\\) with \\(m \\ge 1\\) activators and \\(k \\ge 1\\) inhibitors, its truth density is \\(TD_{OR-NOT}=\\frac{2^n-(2^k-1)}{2^n} = 1 + \\frac{1}{2^n} - \\frac{1}{2^m}\\). Proof. Using De Morgan’s law we can re-write \\(f_{OR-NOT}\\) in a DNF form as: \\[\\begin{equation} \\begin{split} f_{OR-NOT}(x,y) &amp; = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\lor \\lnot \\left(\\bigvee_{i=1}^{k} y_i\\right) \\\\ &amp; = \\left(\\bigvee_{i=1}^{m} x_i\\right) \\lor \\left(\\bigwedge_{i=1}^{k} \\lnot y_i\\right) \\\\ &amp; = x_1 \\lor x_2 \\lor ... \\lor x_m \\lor (\\lnot y_1 \\land ... \\land \\lnot y_k) \\end{split} \\end{equation}\\] To calculate the \\(TD_{OR-NOT}\\), it’s easier to find the number of rows of the \\(f_{OR-NOT}\\) truth table that result in a FALSE output result (\\(R_{false}\\)), subtract that number from the total number of rows (\\(2^n\\)) to get the rows that result in \\(f\\) being TRUE and then divide by the total. Thus \\(TD_{OR-NOT} = \\frac{2^n-R_{false}}{2^n}\\). Note that \\(f_{OR-NOT}\\), written in it’s equivalent DNF form, has exactly \\(m+1\\) clauses. To make \\(f_{OR-NOT}\\) FALSE, we first need to assign the \\(m\\) activators as FALSE and then it all depends on the logical assignments of the inhibitors \\(y_i\\) that are part of the last clause. Out of all possible \\(2^k\\) TRUE/FALSE logical assignments of the \\(k\\) inhibitors (ranging from all FALSE to all TRUE) there is only one that does not make the last clause of \\(f_{OR-NOT}\\) FALSE and that happens when all \\(k\\) inhibitors are FALSE. Thus, \\(R_{false}=2^k-1\\) and \\(TD_{OR-NOT}=\\frac{2^n-(2^k-1)}{2^n}\\). Asymptotic behavior For a large number of regulators \\(n\\), the truth densities of the AND-NOT and OR-NOT functions are as follows: AND-NOT: \\[TD_{AND-NOT} = \\frac{1}{2^k}-\\frac{1}{2^n} \\xrightarrow{n \\text{ large}} \\frac{1}{2^k} \\xrightarrow{k \\text{ large}}0\\] OR-NOT: \\[TD_{OR-NOT} = 1 + \\frac{1}{2^n} - \\frac{1}{2^m} \\xrightarrow{n \\text{ large}} 1-\\frac{1}{2^m} \\xrightarrow{m \\text{ large}} 1\\] For large \\(n\\), the \\(TD_{AND-NOT}\\) depends only on the number of inhibitors and tends towards \\(0\\) with increasing number of inhibitors. Similarly, the \\(TD_{OR-NOT}\\) depends only on the number of activators for large \\(n\\) and tends towards \\(1\\) with increasing number of activators. Also, again for large \\(n\\), the extreme case of having a TD value equal to \\(1/2\\) is a result of having only one of the regulators being an inhibitor (resp. activator) of the AND-NOT (resp. OR-NOT) equation. Validation We can use the data above to validate the TD formulas (up to \\(n=20\\)): # Validate AND-NOT Truth Density formula formula_td_and_not = stats %&gt;% mutate(formula_td_and_not = (2^num_act - 1)/(2^num_reg)) %&gt;% pull(formula_td_and_not) all(stats %&gt;% pull(td_and_not) == formula_td_and_not) [1] TRUE # Validate OR-NOT Truth Density formula formula_td_or_not = stats %&gt;% mutate(formula_td_or_not = (((2^num_act - 1) * (2^num_inh)) + 1)/(2^num_reg)) %&gt;% pull(formula_td_or_not) all(stats %&gt;% pull(td_or_not) == formula_td_or_not) [1] TRUE AND-NOT vs OR-NOT TD Comparing the AND-NOT and OR-NOT truth densities across the number of regulators: # tidy up data stats_and_or = tidyr::pivot_longer(data = stats, cols = c(td_and_not, td_or_not), names_to = &quot;lo&quot;, values_to = &quot;td&quot;) %&gt;% select(num_reg, lo, td) %&gt;% mutate(lo = replace(x = lo, list = lo == &quot;td_and_not&quot;, values = &quot;AND-NOT&quot;)) %&gt;% mutate(lo = replace(x = lo, list = lo == &quot;td_or_not&quot;, values = &quot;OR-NOT&quot;)) %&gt;% rename(`Link Operator` = lo) ggboxplot(data = stats_and_or, x = &quot;num_reg&quot;, y = &quot;td&quot;, color = &quot;Link Operator&quot;, palette = &quot;Set1&quot;, title = &quot;AND-NOT vs OR-NOT Truth Densities&quot;, xlab = &quot;Number of regulators&quot;, ylab = &quot;Truth Density&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 1: AND-NOT vs OR-NOT Truth Densities across all possible activators and inhibitors combinations up to 20 regulators The more regulators there are, the more likely it is that the AND-NOT link operator in the boolean equation will result in an inhibited target and that the OR-NOT link operator in an active target. For \\(n&gt;6\\), the points outside the boxplots (with a truth density of \\(\\frac{1}{2}, \\frac{1}{4}, 1-\\frac{1}{4},\\frac{1}{8},1-\\frac{1}{8},...\\)) correspond to the long-term behavior of the truth density formulas shown above where there is also large imbalance between the number of activators and inhibitors. We can also check the relation between TD and number of activators and inhibitors in each case. The following two figures show us why the number of inhibitors are more decisive in the AND-NOT case: ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_inh&quot;, y = &quot;td_and_not&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Inhibitors&quot;, title = &quot;AND-NOT TD vs Number of Inhibitors&quot;) + theme(plot.title = element_text(hjust = 0.5)) ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_act&quot;, y = &quot;td_and_not&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Activators&quot;, title = &quot;AND-NOT TD vs Number of Activators&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 2: AND-NOT TD vs Number of Activators and Inhibitors In the OR-NOT case the number of activators is more important: ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_inh&quot;, y = &quot;td_or_not&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Inhibitors&quot;, title = &quot;OR-NOT TD vs Number of Inhibitors&quot;) + theme(plot.title = element_text(hjust = 0.5)) ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_act&quot;, y = &quot;td_or_not&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Activators&quot;, title = &quot;OR-NOT TD vs Number of Activators&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 3: OR-NOT TD vs Number of Activators and Inhibitors BalanceOp1 TD If we add the BalanceOp1 TD results to the first plot we have: # tidy up data stats_and_or_balance = tidyr::pivot_longer(data = stats, cols = c(td_and_not, td_or_not, td_balance_op), names_to = &quot;lo&quot;, values_to = &quot;td&quot;) %&gt;% select(num_reg, lo, td) %&gt;% mutate(lo = replace(x = lo, list = lo == &quot;td_and_not&quot;, values = &quot;AND-NOT&quot;)) %&gt;% mutate(lo = replace(x = lo, list = lo == &quot;td_or_not&quot;, values = &quot;OR-NOT&quot;)) %&gt;% mutate(lo = replace(x = lo, list = lo == &quot;td_balance_op&quot;, values = &quot;BalanceOp1&quot;)) %&gt;% rename(`Link Operator` = lo) ggboxplot(data = stats_and_or_balance, x = &quot;num_reg&quot;, y = &quot;td&quot;, color = &quot;Link Operator&quot;, palette = &quot;Set1&quot;, title = &quot;AND-NOT vs OR-NOT vs BalanceOp1 Truth Densities&quot;, xlab = &quot;Number of regulators&quot;, ylab = &quot;Truth Density&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 4: AND-NOT vs OR-NOT vs BalanceOp1 Truth Densities across all possible activators and inhibitors combinations up to 20 regulators The BalanceOp1 TD values are closer to the TD values of the OR-NOT formula compared to the AND-NOT one. The BalanceOp1 is less biased compared to the OR-NOT link operator, but still for large \\(n\\) (regulators) it practically makes the target activated. As we can see in the following two figures, the BalanceOp1 shows a more balanced dependency between the number of activators and inhibitors: ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_inh&quot;, y = &quot;td_balance_op&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Inhibitors&quot;, title = &quot;BalanceOp1 TD vs Number of Inhibitors&quot;) + theme(plot.title = element_text(hjust = 0.5)) ggscatter(data = stats %&gt;% rename(`#Regulators` = num_reg), x = &quot;num_act&quot;, y = &quot;td_balance_op&quot;, color = &quot;#Regulators&quot;, ylab = &quot;Truth Density&quot;, xlab = &quot;Number of Activators&quot;, title = &quot;BalanceOp1 TD vs Number of Activators&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 5: BalanceOp1 TD vs Number of Activators and Inhibitors Threshold Functions TD In contrast, if we check the truth density of the \\(f_{act-win}(x,y)\\) and \\(f_{inh-win}(x,y)\\) boolean functions we have: # tidy up data stats_functions = tidyr::pivot_longer(data = stats, cols = c(td_exp_act, td_exp_inh), names_to = &quot;fun&quot;, values_to = &quot;td&quot;) %&gt;% select(num_reg, fun, td) %&gt;% mutate(fun = replace(x = fun, list = fun == &quot;td_exp_act&quot;, values = &quot;Activators Win&quot;)) %&gt;% mutate(fun = replace(x = fun, list = fun == &quot;td_exp_inh&quot;, values = &quot;Inhibitors Win&quot;)) %&gt;% rename(`Equation Formula` = fun) ggboxplot(data = stats_functions, x = &quot;num_reg&quot;, y = &quot;td&quot;, color = &quot;Equation Formula&quot;, palette = &quot;lancet&quot;, title = latex2exp::TeX(&quot;Truth Densities of $f_{act-win}(x,y)$ and $f_{inh-win}(x,y)$&quot;), xlab = &quot;Number of regulators&quot;, ylab = &quot;Truth Density&quot;) + theme(plot.title = element_text(hjust = 0.5)) Figure 6: Truth Desities of two robust boolean formulas across all possible activators and inhibitors combinations up to 20 regulators Both boolean functions show a large variance of truth densities irrespective of the number of regulators, since the values inside the boxplots represent the middle \\(50\\%\\) of the data and span across the \\((0,1)\\) range. The median values seem to converge to \\(0.5\\) for both formulas. The median value of truth density for the \\(f_{act-win}(x,y)\\) is always larger than the \\(f_{inh-win}(x,y)\\) (as expected). TD Data Distance We check how close are the truth density values of the different proposed BBRs, also compared to the proportion of activators, e.g. if a BBR has 1 activator and 5 inhibitors (resp. 5 activators and 1 inhibitor) I would expect the boolean regulatory function’s output to be statistically more inhibited (resp. activated). We find the euclidean distance between the different truth density values and show them in a table and dendrogram format: act_prop = stats %&gt;% mutate(act_prop = num_act/num_reg) %&gt;% pull(act_prop) td_and_not = stats %&gt;% pull(td_and_not) td_or_not = stats %&gt;% pull(td_or_not) td_balance_op = stats %&gt;% pull(td_balance_op) td_exp_act = stats %&gt;% pull(td_exp_act) td_exp_inh = stats %&gt;% pull(td_exp_inh) d = dist(x = rbind(act_prop, td_and_not, td_or_not, td_balance_op, td_exp_act, td_exp_inh), method = &quot;euclidean&quot;) # color `act_prop` column breaks = quantile(unname(as.matrix(d)[, &quot;act_prop&quot;]), probs = seq(.05, .95, .05), na.rm = TRUE) col = round(seq(255, 40, length.out = length(breaks) + 1), 0) %&gt;% {paste0(&quot;rgb(255,&quot;, ., &quot;,&quot;, ., &quot;)&quot;)} # red caption.title = &quot;Euclidean Distances between vectors of truth density values (Symmetric)&quot; DT::datatable(data = d %&gt;% as.matrix(), options = list(dom = &quot;t&quot;, scrollX = TRUE), caption = htmltools::tags$caption(caption.title, style=&quot;color:#dd4814; font-size: 18px&quot;)) %&gt;% formatRound(1:6, digits = 3) %&gt;% formatStyle(columns = c(&quot;act_prop&quot;), backgroundColor = styleInterval(breaks, col)) plot(hclust(dist(d)), main = &quot;Distance Dendogram of Thruth Densities&quot;, ylab = &quot;Euclidean Distance&quot;, sub = &quot;&quot;, xlab = &quot;&quot;) The threshold functions have truth densities values that are closer to the proportion of activators for a varying number of regulators, compared to the AND-NOT and OR-NOT formulas. As such they might represent more realistic candidates for regulatory functions from a statistical point of view. The TD values of OR-NOT and BalanceOp1 are in general very close (as we’ve also seen in a previous figure) Correlation We will now check the correlation between each pair of operators/proposed functions, as well as the number of regulators, inhibitors and activators: M = cor(stats, method = &quot;kendall&quot;) res = corrplot::cor.mtest(stats, method = &quot;kendall&quot;) corrplot::corrplot(corr = M, type = &quot;upper&quot;, p.mat = res$p, sig.level = c(.001, .01, .05), pch.cex = 1, pch.col = &quot;white&quot;, insig = &quot;label_sig&quot;, tl.col = &quot;black&quot;, tl.srt = 45) Figure 7: Correlation Matrix of Truth Densities and number of regulators The two functions results \\(f_{act-win}(x,y), f_{inh-win}(x,y)\\) are highly correlated as expected Lower AND-NOT TD values highly correlate with higher number of inhibitors Higher OR-NOT TD values highly correlate with higher number of activators "],
["cascade-1-0-data-analysis.html", "CASCADE 1.0 Data Analysis Data Parameterization vs Activity", " CASCADE 1.0 Data Analysis Data Using abmlog we generated all \\(2^{23} = 8388608\\) possible link operator mutated models for the CASCADE 1.0 topology (\\(23\\) nodes have at least one regulator from each category, i.e. an activator and an inhibitor). The models are stored in both .gitsbe and .bnet files in the Zenodo dataset (the gitsbe files include also the fixpoint attractors). The dataset includes models with \\(0,1\\) or \\(2\\) stable states. We used the get_ss_data.R script to get the 1 stable state data from the models and it’s this data we are going to analyze in the next section. Parameterization vs Activity We calculate the node_stats object using the get_node_stats.R script. This object includes the agreement statistics information for each link-operator node (i.e. one that is targeted by both activators and inhibitors). Load the node_stats: node_stats = readRDS(file = &quot;data/node_stats.rds&quot;) We are interested in two variables of interest: Parameterization of a link operator node: AND-NOT (0) vs OR-NOT (1) Stable State of a node: inhibited (0) vs active (1) There exist are 4 different possibilities related to 2 cases: 0-0, 1-1 =&gt; parameterization and stable state match (e.g. node was parameterized with AND-NOT and it’s state was inhibited or it had OR-NOT and its state was active) 1-0, 0-1 =&gt; parameterization and stable state differ (e.g. node had OR-NOT and its state was inhibited, or AND-NOT and it’s state was active) In the next Figure we show the total observed proportionate agreement or percent agreement for each node, which is the number of models for which parameterization and stable state matched (case 1 above) divided by the total amount of models: node_stats %&gt;% mutate(node = forcats::fct_reorder(node, desc(num_reg))) %&gt;% ggplot(aes(x = node, y = obs_prop_agreement, fill = as.factor(num_reg))) + geom_bar(stat = &quot;identity&quot;) + scale_y_continuous(labels=scales::percent) + labs(title = &quot;Agreement between Link Operator Parameterization and Stable State Activity&quot;, x = &quot;Target Nodes with both activating and inhibiting regulators&quot;, y = &quot;Percent Agreement&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90)) + scale_fill_brewer(guide = guide_legend(reverse=TRUE, title = &quot;#Regulators&quot;), palette = &quot;Set1&quot;) + geom_hline(yintercept = 0.5, linetype = &#39;dashed&#39;) Figure 8: Parameterization and Stable State activity agreement The total barplot area covered (i.e. the total percent agreement score so to speak) is 77.7294779%. The above score means that the is a higher probability than chance to assign a node the AND-NOT (resp. OR-NOT) link operator in its respective boolean equation and that node at the same time having an inhibited (resp. activated) stable state of \\(0\\) (.resp \\(1\\)) in any CASCADE 1.0 link operator parameterized model. This suggests that the corresponding boolean formula used is biased. In the next figure, where we have separated the nodes to groups based on the number of regulators, we observe that even for a small number of regulators, the median percent agreement score is higher than \\(0.5\\): node_stats %&gt;% mutate(num_reg = as.factor(num_reg)) %&gt;% ggplot(aes(x = num_reg, y = obs_prop_agreement, fill = num_reg)) + geom_boxplot(show.legend = FALSE) + geom_jitter(shape = 19, position = position_jitter(0.2), show.legend = FALSE) + scale_y_continuous(labels = scales::percent, limits = c(0,1)) + labs(title = &quot;Agreement (parameterization vs stable state activity)&quot;, x = &quot;Number of Regulators&quot;, y = &quot;Percent Agreement&quot;) + geom_hline(yintercept = 0.5, linetype = &#39;dashed&#39;, color = &quot;red&quot;) + theme_classic(base_size = 14) + theme(axis.text.x = element_text(size = 15)) Figure 9: Parameterization and Stable State activity agreement. CASCADE 1.0 link-operator nodes are grouped based on their respective number of regulators Next, we calculate per node, the proportion of link operator assignments that retained their expected (i.e. keeping the same digit) stable state activity (e.g. the proportion of models corresponding to the cases 0-0/(0-0 + 0-1) for the AND-NOT link operator - and 1-1/(1-1 + 1-o) for OR-NOT): node_stats %&gt;% mutate(and_not_0ss_prop = and_not_0ss_agreement/(and_not_0ss_agreement + and_not_1ss_disagreement)) %&gt;% mutate(or_not_1ss_prop = or_not_1ss_agreement/(or_not_1ss_agreement + or_not_0ss_disagreement)) %&gt;% select(node, num_reg, and_not_0ss_prop, or_not_1ss_prop, active_prop) %&gt;% rename(`AND-NOT` = and_not_0ss_prop, `OR-NOT` = or_not_1ss_prop) %&gt;% mutate(node = forcats::fct_reorder(node, desc(num_reg))) %&gt;% pivot_longer(cols = c(`AND-NOT`, `OR-NOT`)) %&gt;% ggplot(aes(x = node, y = value, fill = name)) + geom_bar(position = &quot;dodge&quot;, stat = &quot;identity&quot;) + scale_y_continuous(labels=scales::percent) + labs(title = &quot;Link Operator Parameterization Agreement with Stable State Activity&quot;, x = &quot;Target Nodes with both activating and inhibiting regulators&quot;, y = &quot;Percent Agreement&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90)) + scale_fill_brewer(guide = guide_legend(title = &quot;Link Operator&quot;), palette = &quot;Set1&quot;) + geom_line(aes(y = active_prop, color = active_prop), group = 1, size = 1.2) + scale_color_gradient(labels=scales::percent, low=&quot;grey&quot;, high=&quot;green&quot;, name = &quot;%Models:active node&quot;, limits = c(0,1)) + theme(legend.title = element_text(size = 10)) Figure 10: Parameterization and Stable State activity agreement 2 Higher proportional activity for a node correlates with higher OR-NOT-activated state agreement. LRP_f has 4 activators and 1 inhibitor and from the previous TD data table we have that: \\(TD_{AND-NOT,4+1}=0.469\\), \\(TD_{OR-NOT,4+1}=0.969\\), numbers which correspond really well with the percent agreement scores found across all the CASCADE 1.0 models. TSC_f and mTORC2_c are always found inhibited and thus the agreement with the AND-NOT-inhibited state is perfect and the OR-NOT-activated state agreement zero. TSC_f has 1 activator and 4 inhibitors, which corresponds well to it’s total inhibition profile in all the models (with significantly more inhibitors, there is a higher probability of the target node being inhibited). The TD values are \\(TD_{AND-NOT,1+4}=0.03\\), \\(TD_{OR-NOT,1+4}=0.53\\) and so the percent agreement between the AND-NOT parameterization and the resulting \\(0\\) stable state activity is justified, but for the OR-NOT cases we would expect around half of them to be in agreement (have a value of \\(1\\) in the stable state) - which was not the case (all of them had \\(0\\)). Probably the network dynamical configuration may have something to do with that. caption.title = &quot;Link Operator Statistics (CASCADE 1.0)&quot; DT::datatable(data = node_stats %&gt;% select(node, num_reg, num_act, num_inh), caption = htmltools::tags$caption(caption.title, style=&quot;color:#dd4814; font-size: 18px&quot;), options = list(order = list(list(2, &quot;desc&quot;)))) %&gt;% formatRound(5:6, digits = 3) "],
["cascade-2-0-data-analysis.html", "CASCADE 2.0 Data Analysis Data Parameterization vs Activity", " CASCADE 2.0 Data Analysis We will perform the same analysis as in the previous section, only now for a randomly selected sample of models from the CASCADE 2.0 topology. CASCADE 2.0 represents a larger topology/network with nodes with more than \\(5\\) regulators and as such we expect to see even more agreement between stable state activity and link operator assignment for these nodes (which will be a proof-of-concept for the link operator bias). Data The dataset used was generated for another analysis and we are going to use part of it, i.e. the models that had 1 stable state (see get_node_stats_cascade_2.R script). The dataset is stored in Zenodo Load the CASCADE 2.0 node_stats_cascade2: node_stats_cascade2 = readRDS(file = &quot;data/node_stats_cascade2.rds&quot;) Parameterization vs Activity The next Figure shows the total percent agreement for each link operator node in CASCADE 2.0 (a total of \\(52\\) nodes), which is the number of models for which parameterization and stable state matched divided by the total amount of models (\\(20672\\)): node_stats_cascade2 %&gt;% mutate(node = forcats::fct_reorder(node, desc(num_reg))) %&gt;% ggplot(aes(x = node, y = obs_prop_agreement, fill = as.factor(num_reg))) + geom_bar(stat = &quot;identity&quot;) + scale_y_continuous(labels=scales::percent) + labs(title = &quot;Agreement between Link Operator Parameterization and Stable State Activity&quot;, x = &quot;Target Nodes with both activating and inhibiting regulators&quot;, y = &quot;Percent Agreement&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90)) + scale_fill_brewer(guide = guide_legend(reverse=TRUE, title = &quot;#Regulators&quot;), palette = &quot;Spectral&quot;) + geom_hline(yintercept = 0.5, linetype = &#39;dashed&#39;) Figure 11: Parameterization and Stable State activity agreement (CASCADE 2.0) The total barplot area covered (i.e. the total agreement score so to speak) is 78.6334916%. The nodes with number of regulators \\(&gt;5\\) have always a percent agreement \\(\\geq 70\\%\\) between stable state activity and link operator parameterization. The above results provide evidence that the statistics-based conclusion we reached in a previous section is correct, i.e. that the standardized boolean formula is biased for larger number of regulators. In the next two figures, we group the nodes to \\(3\\) groups, based on the number of regulators they have. In order to account for the uncertainty factors involved when comparing stable state activity values and corresponding link-operator parameterization, we additionally try a more robust statistic to measure the level of agreement, namely the Cohen’s kappa coefficient (\\(\\kappa\\)): node_stats_cascade2 %&gt;% mutate(reg_group = factor(case_when(num_reg &gt;= 6 ~ &quot;&gt;5&quot;, num_reg &lt;= 3 ~ &quot;2-3&quot;, TRUE ~ &quot;4-5&quot;), levels = c(&quot;2-3&quot;, &quot;4-5&quot;, &quot;&gt;5&quot;))) %&gt;% ggplot(aes(x = reg_group, y = obs_prop_agreement, fill = reg_group)) + geom_boxplot(show.legend = FALSE) + geom_jitter(shape = 19, position = position_jitter(0.2), show.legend = FALSE) + scale_y_continuous(labels = scales::percent, limits = c(0,1)) + labs(title = &quot;Agreement (parameterization vs stable state activity)&quot;, x = &quot;Number of Regulators&quot;, y = &quot;Percent Agreement&quot;) + geom_hline(yintercept = 0.5, linetype = &#39;dashed&#39;, color = &quot;red&quot;) + theme_classic(base_size = 14) + theme(axis.text.x = element_text(size = 15)) node_stats_cascade2 %&gt;% mutate(reg_group = factor(case_when(num_reg &gt;= 6 ~ &quot;&gt;5&quot;, num_reg &lt;= 3 ~ &quot;2-3&quot;, TRUE ~ &quot;4-5&quot;), levels = c(&quot;2-3&quot;, &quot;4-5&quot;, &quot;&gt;5&quot;))) %&gt;% ggplot(aes(x = reg_group, y = cohen_k, fill = reg_group)) + geom_boxplot(show.legend = FALSE) + geom_jitter(shape = 19, position = position_jitter(0.2), show.legend = FALSE) + ylim(c(0,1)) + labs(title = &quot;Cohen&#39;s k (parameterization vs stable state activity)&quot;, x = &quot;Number of Regulators&quot;, y = latex2exp::TeX(&quot;$\\\\kappa$&quot;)) + geom_hline(yintercept = 0.6, linetype = &#39;dashed&#39;, color = &quot;red&quot;) + geom_text(aes(x = 3.4, y = 0.55, label=&quot;k = 0.6&quot;)) + theme_classic(base_size = 14) + theme(axis.text.x = element_text(size = 15)) Figure 12: Parameterization and Stable State activity agreement. CASCADE 2.0 link-operator nodes are grouped based on their respective number of regulators The larger the number of regulators, the higher the percent agreement and Cohen’s \\(\\kappa\\). Though Cohen’s kappa \\(\\kappa\\) might not be a proper agreement measurement for this dataset, we know that it is more sophisticated than the simple percent agreement calculation, as it takes into account the possibility of the agreement occurring by chance. In the figure above we have drawn a horizontal line to indicate the value of \\(\\kappa\\) that corresponds to a moderate or substantial strength of agreement (Landis and Koch 1977; McHugh 2012) "],
["r-session-info.html", "R session info", " R session info xfun::session_info() R version 3.6.3 (2020-02-29) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 18.04.5 LTS Locale: LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C Package version: abind_1.4-5 assertthat_0.2.1 backports_1.1.9 base64enc_0.1.3 BH_1.72.0.3 bookdown_0.20 boot_1.3.25 broom_0.7.0 callr_3.4.4 car_3.0-9 carData_3.0-4 cellranger_1.1.0 cli_2.0.2 clipr_0.7.0 codetools_0.2-16 colorspace_1.4-1 compiler_3.6.3 conquer_1.0.2 corrplot_0.84 cowplot_1.1.0 cpp11_0.2.1 crayon_1.3.4 crosstalk_1.1.0.1 curl_4.3 data.table_1.13.0 desc_1.2.0 digest_0.6.25 doParallel_1.0.15 dplyr_1.0.2 DT_0.15 ellipsis_0.3.1 evaluate_0.14 fansi_0.4.1 farver_2.0.3 forcats_0.5.0 foreach_1.5.0 foreign_0.8-75 generics_0.0.2 ggplot2_3.3.2 ggpubr_0.4.0 ggrepel_0.8.2 ggsci_2.9 ggsignif_0.6.0 glue_1.4.2 graphics_3.6.3 grDevices_3.6.3 grid_3.6.3 gridExtra_2.3 gtable_0.3.0 gtools_3.8.2 haven_2.3.1 highr_0.8 hms_0.5.3 htmltools_0.5.0 htmlwidgets_1.5.1 isoband_0.2.2 iterators_1.0.12 jsonlite_1.7.1 knitr_1.29 labeling_0.3 later_1.1.0.1 latex2exp_0.4.0 lattice_0.20.41 lazyeval_0.2.2 lifecycle_0.2.0 lme4_1.1.23 magrittr_1.5 maptools_1.0.2 markdown_1.1 MASS_7.3.53 Matrix_1.2.18 MatrixModels_0.4.1 matrixStats_0.56.0 methods_3.6.3 mgcv_1.8.33 mime_0.9 minqa_1.2.4 munsell_0.5.0 nlme_3.1.149 nloptr_1.2.2.2 nnet_7.3.14 openxlsx_4.1.5 parallel_3.6.3 pbkrtest_0.4.8.6 pillar_1.4.6 pkgbuild_1.1.0 pkgconfig_2.0.3 pkgload_1.1.0 polynom_1.4.0 praise_1.0.0 prettyunits_1.1.1 processx_3.4.4 progress_1.2.2 promises_1.1.1 ps_1.3.4 purrr_0.3.4 quantreg_5.67 R6_2.4.1 RColorBrewer_1.1.2 Rcpp_1.0.5 RcppArmadillo_0.9.900.3.0 RcppEigen_0.3.3.7.0 readr_1.3.1 readxl_1.3.1 rematch_1.0.1 rio_0.5.16 rlang_0.4.7 rmarkdown_2.3 rprojroot_1.3.2 rstatix_0.6.0 rstudioapi_0.11 scales_1.1.1 sp_1.4.2 SparseM_1.78 splines_3.6.3 statmod_1.4.34 stats_3.6.3 stringi_1.5.3 stringr_1.4.0 testthat_2.3.2 tibble_3.0.3 tidyr_1.1.2 tidyselect_1.1.0 tinytex_0.25 tools_3.6.3 usefun_0.4.8 utf8_1.1.4 utils_3.6.3 vctrs_0.3.4 viridisLite_0.3.0 withr_2.2.0 xfun_0.17 yaml_2.2.1 zip_2.1.1 "],
["references.html", "References", " References Chaouiya, Claudine, Ouerdia Ourrad, and Ricardo Lima. 2013. “Majority Rules with Random Tie-Breaking in Boolean Gene Regulatory Networks.” PLoS ONE 8 (7): 69626. https://doi.org/10.1371/journal.pone.0069626. Cury, José E. R., Pedro T. Monteiro, and Claudine Chaouiya. 2019. “Partial Order on the set of Boolean Regulatory Functions,” January. http://arxiv.org/abs/1901.07623. Landis, J. Richard, and Gary G. Koch. 1977. “The Measurement of Observer Agreement for Categorical Data.” Biometrics 33 (1): 159. https://doi.org/10.2307/2529310. McHugh, Mary L. 2012. “Interrater reliability: The kappa statistic.” Biochemia Medica 22 (3): 276–82. https://doi.org/10.11613/bm.2012.031. Mendoza, Luis, and Ioannis Xenarios. 2006. “A method for the generation of standardized qualitative dynamical systems of regulatory networks.” Theoretical Biology and Medical Modelling 3 (1): 13. https://doi.org/10.1186/1742-4682-3-13. "]
]
